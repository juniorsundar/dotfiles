@document.meta
title: Neovim Configuration
description: 
authors: juniorsundar
categories: 
tangle: ./init.lua
created: 2024-04-13T13:46:44+0400
updated: 2024-04-13T14:23:28+0400
version: 1.1.1
@end

* Introduction

  This is my attempt to turn my configuration file into a tangle-able `.norg`
  file. To do this, I will be using the {https://github.com/folke/lazy.nvim}[`lazy.nvim`] package manager.

  @code lua
  P = {}
  @end

* Options

  @code lua
  vim.g.mapleader = vim.api.nvim_replace_termcodes("<A-Space>", true, true, true)
  vim.g.mapleader = " "
  vim.g.maplocalleader = ","

  -- Hint: use `:h <option>` to figure out the meaning if needed
  vim.opt.clipboard = "unnamedplus" -- use system clipboard
  vim.opt.completeopt = { "menu", "menuone", "noselect" }
  vim.opt.mouse = "a" -- allow the mouse to be used in Nvim

  -- Tab
  vim.opt.tabstop = 4 -- number of visual spaces per TAB
  vim.opt.softtabstop = 4 -- number of spacesin tab when editing
  vim.opt.shiftwidth = 4 -- insert 4 spaces on a tab
  vim.opt.expandtab = true -- tabs are spaces, mainly because of python

  -- UI config
  vim.opt.number = true -- show absolute number
  vim.opt.relativenumber = true -- add numbers to each line on the left side
  vim.opt.cursorline = true -- highlight cursor line underneath the cursor horizontally
  vim.opt.splitbelow = true -- open new vertical split bottom
  vim.opt.splitright = true -- open new horizontal splits right
  vim.opt.termguicolors = true -- enabl 24-bit RGB color in the TUI
  vim.opt.showmode = false -- we are experienced, wo don't need the "-- INSERT --" mode hint

  -- Searching
  vim.opt.incsearch = true -- search as characters are entered
  vim.opt.hlsearch = false -- do not highlight matches
  vim.opt.ignorecase = true -- ignore case in searches by default
  vim.opt.smartcase = true -- but make it case sensitive if an uppercase is entered
  vim.opt.inccommand = "split" -- shows how certain commands apply in a separate window

  vim.opt.undofile = true
  vim.opt.signcolumn = "yes"
  vim.opt.scrolloff = 10

  vim.api.nvim_create_autocmd("TextYankPost", {
  desc = "Highlight when yanking (copying) text",
  group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
  callback = function()
  vim.highlight.on_yank()
  end,
  })
  @end

* Keymaps

** Standard

   @code lua
   -- define common options
   local opts = {
   noremap = false, -- non-recursive
   silent = true, -- do not show message
   }
   @end

*** Normal Mode

**** Window Management

     Moving between windows:

     @code lua
     vim.keymap.set("n", "<C-h>", "<C-w>h", opts)
     vim.keymap.set("n", "<C-j>", "<C-w>j", opts)
     vim.keymap.set("n", "<C-k>", "<C-w>k", opts)
     vim.keymap.set("n", "<C-l>", "<C-w>l", opts)
     @end

     Resizing the windows vertically and horizontally:

     @code lua
     vim.keymap.set("n", "<C-A-Up>", ":resize -2<CR>", opts)
     vim.keymap.set("n", "<C-A-Down>", ":resize +2<CR>", opts)
     vim.keymap.set("n", "<C-A-Left>", ":vertical resize -2<CR>", opts)
     vim.keymap.set("n", "<C-A-Right>", ":vertical resize +2<CR>", opts)
     @end

**** Code Navigation

     For granular movement within the same line:

     @code lua
     vim.keymap.set("n", "<C-Right>", "w", opts)
     vim.keymap.set("n", "<C-Left>", "b", opts)
     vim.keymap.set("n", "<C-Up>", "gk", opts)
     vim.keymap.set("n", "<C-Down>", "gj", opts)
     @end

     For shifting lines up and down:

     @code lua
     vim.keymap.set("n", "<S-A-Up>", "<cmd>m .-2<CR>==", opts)
     vim.keymap.set("n", "<S-A-Down>", "<cmd>m .+1<CR>==", opts)
     @end

*** Visual Mode

    @code lua
    vim.keymap.set("v", "<", "<gv", opts)
    vim.keymap.set("v", ">", ">gv", opts)
    vim.keymap.set("v", "<S-A-Up>", "<cmd>m .-2<CR>==", opts)
    vim.keymap.set("v", "<S-A-Down>", "<cmd>m .+1<CR>==", opts)
    @end

*** Terminal Mode

    Remapping the key to exit `INSERT` mode in `TERMINAL` mode to make life
    easier:

    @code lua
    vim.keymap.set('t', '<C-\\><C-\\>', '<C-\\><C-n>', { desc = 'Exit terminal mode' })
    @end

** `which-key.nvim`

   This plugin offers a more aesthetic and streamlined process to map keys.
   Especially if the keys need to be multi-level in nature, allowing for
   breadcrumbs and grouping.

   It also takes over the register as well as the spelling suggestions.

   @code lua
   table.insert(P, {
       "folke/which-key.nvim",
       init = function()
           vim.o.timeout = true
           vim.o.timeoutlen = 500
       end,
       config = function()
           local keymap = vim.keymap -- for conciseness
           local status_ok, which_key = pcall(require, "which-key")
           if not status_ok then
               return
           end

           local setup = {
               plugins = {
                   marks = true,
                   registers = true,
                   spelling = {
                       enabled = true,
                       suggestions = 20,
                   },
                   presets = {
                       operators = false,
                       motions = true,
                       text_objects = true,
                       windows = true,
                       nav = true,
                       z = true,
                       g = true,
                   },
               },
               key_labels = {
                   -- Custom labels for keys
               },
               icons = {
                   breadcrumb = "»",
                   separator = "➜",
                   group = "+",
               },
               popup_mappings = {
                   scroll_down = "<c-d>",
                   scroll_up = "<c-u>",
               },
               window = {
                   border = "rounded",
                   position = "bottom",
                   margin = { 1, 0, 1, 0 },
                   padding = { 2, 2, 2, 2 },
                   winblend = 0,
               },
               layout = {
                   height = { min = 4, max = 25 },
                   width = { min = 20, max = 50 },
                   spacing = 3,
                   align = "center",
               },
               ignore_missing = false,
               hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " },
               show_help = true,
               triggers = "auto",
               triggers_blacklist = {
                   i = { "j", "k" },
                   v = { "j", "k" },
               },
           }

           local opts = {
               mode = "n",
               prefix = "<leader>",
               buffer = nil,
               silent = true,
               noremap = true,
               nowait = true,
           }

           local mappings = {
               a = { "<cmd>Alpha<cr>", "Alpha" },
               b = { "<cmd>FzfLua buffers<cr>", "Buffers" },
               w = { "<cmd>w!<cr>", "Save" },
               q = { "<cmd>q!<cr>", "Quit" },
               c = { "<cmd>bdelete!<cr>", "Close Buffer" },
               l = { "<cmd>Lazy<cr>", "Lazy" },
               m = { "<cmd>Mason<cr>", "Mason" },
               o = { "<cmd>Oil<cr>", "Oil" },
               t = { "<cmd>terminal<cr>", "Terminal" },
               -- Autocompletion
               A = {
                   name = "Autocompletion",
                   e = { "<cmd>lua require 'cmp'.setup{ enabled = true }<cr>", "Enabled" },
                   d = { "<cmd>lua require 'cmp'.setup{ enabled = false }<cr>", "Disabled" },
               },
               -- Find
               F = {
                   name = "Find",
                   f = { "<cmd>FzfLua files<cr>", "Files" },
                   t = { "<cmd>FzfLua live_grep<CR>", "Text" },
               },
               -- Git
               G = {
                   name = "Git",
                   o = { "<cmd>FzfLua git_status<cr>", "Open changed file" },
                   b = { "<cmd>FzfLua git_branches<cr>", "Checkout branch" },
                   d = { "<cmd>Gitsigns diffthis HEAD<cr>", "Diff" },
               },
               -- Language Server Protocol (LSP)
               L = {
                   name = "LSP",
                   a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
                   f = { "<cmd>lua vim.lsp.buf.format{async=true}<cr>", "Format" },
                   l = { "<cmd>lua vim.lsp.codelens.run()<cr>", "CodeLens Action" },
                   q = { "<cmd>lua vim.diagnostic.setloclist()<cr>", "Quickfix" },
                   n = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename" },
                   r = { "<cmd>lua vim.lsp.buf.references()<cr>", "References" },
                   d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Definition" },
                   c = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Declaration" },
                   i = { "<cmd>lua vim.lsp.buf.implementation()<cr>", "Implementation" },
                   k = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover" },
                   t = { "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Type Definition" },
                   I = { "<cmd>LspInfo<cr>", "LSP Info" },
                   D = {
                       name = "Document",
                       d = { "<cmd>FzfLua diagnostics_document<cr>", "Document Diagnostics" },
                       s = { "<cmd>FzfLua lsp_document_symbols<cr>", "Document Symbols" },
                       j = { "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", "Next Diagnostic" },
                       k = { "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>", "Prev Diagnostic" },
                   },
                   W = {
                       name = "Workspace",
                       a = { "<cmd>lua vim.lsp.buf.add_workspace_folder()<cr>", "Add Workspace Folder" },
                       d = { "<cmd>FzfLua diagnostics_workspace<cr>", "Workspace Diagnostics" },
                       s = { "<cmd>FzfLua lsp_workspace_symbols<cr>", "Workspace Symbols" },
                       r = { "<cmd>lua vim.lsp.buf.remove_workspace_folder()<cr>", "Remove Workspace Folder" },
                       l = {
                           "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<cr>",
                           "List Workspace Folders",
                       },
                   },
               },
               --Telescope
               S = {
                   name = "Search",
                   c = { "<cmd>FzfLua colorscheme<cr>", "Colorscheme" },
                   h = { "<cmd>FzfLua helptags<cr>", "Find Help" },
                   k = { "<cmd>FzfLua keymaps<cr>", "Keymaps" },
                   r = { "<cmd>FzfLua oldfiles<cr>", "Open Recent File" },
                   t = { "<cmd>FzfLua tabs<cr>", "Tabs" },
                   M = { "<cmd>FzfLua manpages<cr>", "Man Pages" },
                   R = { "<cmd>FzfLua registers<cr>", "Registers" },
                   C = { "<cmd>FzfLua commands<cr>", "Commands" },
               },

               N = {
                   name = "Neorg",
                   i = { "<cmd>Neorg index<cr>", "Index" },
                   J = {
                       name = "Journal",
                       t = { "<cmd>Neorg journal today<cr>", "Today's Journal" },
                       m = { "<cmd>Neorg journal tomorrow<cr>", "Tomorrow's Journal" },
                       y = { "<cmd>Neorg journal yesterday<cr>", "Yesterday's Journal" },
                   },
                   M = {
                       name = "Metadata",
                       i = { "<cmd>Neorg inject-metadata<cr>", "Inject" },
                       u = { "<cmd>Neorg update-metadata<cr>", "Update" },
                   },
               },
           }

           which_key.setup(setup)
           which_key.register(mappings, opts)
       end,
   })
   @end

* Theme

  This will be using the catppuccin theme

  @code lua
  table.insert(P, {
      "catppuccin/nvim",
      name = "catppuccin",
      priority = 1000,
      config = function()
          require("catppuccin").setup({
              custom_highlights = function(colors)
                  return {
                      WhichKeyBorder = { fg = colors.base },
                      CmpBorder = { fg = colors.surface2 },
                      Pmenu = { link = "NormalFloat" },
                  }
              end,
              integrations = {
                  cmp = true,
                  gitsigns = true,
                  treesitter = true,
                  alpha = true,
                  barbar = true,
                  flash = true,
                  markdown = true,
                  neogit = true,
                  treesitter_context = true,
                  which_key = true,
                  mason = true,
              },
          })
          vim.cmd.colorscheme("catppuccin-frappe")
      end,
  })
  @end

* `lazy.nvim` load Plugins

  @code lua
  -- Package manager
  local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
  if not vim.loop.fs_stat(lazypath) then
      vim.fn.system({
          "git",
          "clone",
          "--filter=blob:none",
          "https://github.com/folke/lazy.nvim.git",
          "--branch=stable", -- latest stable release
          lazypath,
      })
  end
  vim.opt.rtp:prepend(lazypath)

  require("lazy").setup(P)
  @end
